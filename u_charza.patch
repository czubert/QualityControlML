Index: ML/estimators.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ML/estimators.py b/ML/estimators.py
--- a/ML/estimators.py	(revision fe1a0fb87835e3c12a5b37688985e8b85c357792)
+++ b/ML/estimators.py	(revision 2c817eaa060816cb1081c1eeebf9c62b0143c0ed)
@@ -52,42 +52,42 @@
                     'decomposition__n_components': [100],  # [5,10,50,100,200]  best: 100
                 }},
     
-    'SVC':
-        {
-            'name': 'SVC',
-            'estimator': SVC(),
-            'selector': SelectKBest(),
-            'decomposition': None,  # None because PCA() lowers the scores
-            'params':
-                {
-                    "classifier__C": [0.01, 0.1, 1, 2],  # [0.01, 0.1, 1, 2]  best: 2
-                    "classifier__kernel": ['rbf','poly','linear'],  # ['rbf','poly','linear']  best: 'rbf'
-                    "classifier__degree": [1,3,5],  # [1,3,5]  best: 1
-                    "classifier__max_iter": [-1, 300],  # [-1, 1, 10, 100, 1000]  best: -1
-                    "classifier__gamma": ['auto'],  # []  best: 'auto'
-                    "classifier__tol": [0.001, 0.01 ,1],  # [0.001, 0.01,0.1 ,1]  best: 0.1
-                    "classifier__probability": [True],  # [True, False]  best: True
-                    'selector__k': [90],  # [30, 50, 90, 100, 150, 200]  best: 90
-                }},
-    
-    'RandomForestClassifier':
-        {
-            'name': 'RandomForestClassifier',
-            'estimator': RandomForestClassifier(),
-            'selector': SelectKBest(),
-            'decomposition': None,
-            'params':
-                {
-                    'classifier__n_estimators': [100, 200],  # [list(range(100, 900, 200))]  best: 300
-                    'classifier__criterion': ['gini'],  # ['gini']  best:'gini'
-                    'classifier__max_features': [0.3, 0.5, 0.7],  # [0.3, 0.5, 0.7]  best: 0.5
-                    'classifier__max_depth': [1,10,100],  # [1,10,100]  best: 100
-                    'classifier__max_leaf_nodes': [50, 150, 250],  # [50, 150, 250]  best: 250
-                    'classifier__min_samples_split': [0.1, 0.5, 0.09],  # [1, 5, 10]  best: 5
-                    'classifier__bootstrap': [True],  # [True, False]  best: True
-                    'classifier__max_samples': [50, 150, 250],  # [50, 150, 250]  best: 250
-                    'selector__k': [50,400,600],  # [50,100,120,130,150,200]  best: 100
-                }},
+    # 'SVC':
+    #     {
+    #         'name': 'SVC',
+    #         'estimator': SVC(),
+    #         'selector': SelectKBest(),
+    #         'decomposition': None,  # None because PCA() lowers the scores
+    #         'params':
+    #             {
+    #                 "classifier__C": [0.01, 0.1, 1, 2],  # [0.01, 0.1, 1, 2]  best: 2
+    #                 "classifier__kernel": ['rbf','poly','linear'],  # ['rbf','poly','linear']  best: 'rbf'
+    #                 "classifier__degree": [1,3,5],  # [1,3,5]  best: 1
+    #                 "classifier__max_iter": [-1, 300],  # [-1, 1, 10, 100, 1000]  best: -1
+    #                 "classifier__gamma": ['auto'],  # []  best: 'auto'
+    #                 "classifier__tol": [0.001, 0.01 ,1],  # [0.001, 0.01,0.1 ,1]  best: 0.1
+    #                 "classifier__probability": [True],  # [True, False]  best: True
+    #                 'selector__k': [90],  # [30, 50, 90, 100, 150, 200]  best: 90
+    #             }},
+    #
+    # 'RandomForestClassifier':
+    #     {
+    #         'name': 'RandomForestClassifier',
+    #         'estimator': RandomForestClassifier(),
+    #         'selector': SelectKBest(),
+    #         'decomposition': None,
+    #         'params':
+    #             {
+    #                 'classifier__n_estimators': [100, 200],  # [list(range(100, 900, 200))]  best: 300
+    #                 'classifier__criterion': ['gini'],  # ['gini']  best:'gini'
+    #                 'classifier__max_features': [0.3, 0.5, 0.7],  # [0.3, 0.5, 0.7]  best: 0.5
+    #                 'classifier__max_depth': [1,10,100],  # [1,10,100]  best: 100
+    #                 'classifier__max_leaf_nodes': [50, 150, 250],  # [50, 150, 250]  best: 250
+    #                 'classifier__min_samples_split': [0.1, 0.5, 0.09],  # [1, 5, 10]  best: 5
+    #                 'classifier__bootstrap': [True],  # [True, False]  best: True
+    #                 'classifier__max_samples': [50, 150, 250],  # [50, 150, 250]  best: 250
+    #                 'selector__k': [50,400,600],  # [50,100,120,130,150,200]  best: 100
+    #             }},
 }
 
 kfold = StratifiedKFold(n_splits=5, random_state=SEED, shuffle=True)
@@ -111,8 +111,8 @@
 
     for key, value in classifiers.items():
         tmp_pipe = Pipeline([
-            ('scaler', StandardScaler(with_mean=False)),
-            ('sampling', RandomUnderSampler(random_state=40)),
+            # ('scaler', StandardScaler(with_mean=False)),
+            # ('sampling', RandomUnderSampler(random_state=40)),
             ('selector', value['selector']),
             ('decomposition', value['decomposition']),
             ('classifier', value['estimator']),
Index: ML/train_test_split.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ML/train_test_split.py b/ML/train_test_split.py
--- a/ML/train_test_split.py	(revision fe1a0fb87835e3c12a5b37688985e8b85c357792)
+++ b/ML/train_test_split.py	(revision 2c817eaa060816cb1081c1eeebf9c62b0143c0ed)
@@ -4,8 +4,12 @@
 import utils
 
 # Output paths
-dir_path = 'data_output/step_4_train_test_split_data'
-file_name = 'train_test_split_data'
+dir_path_out = 'data_output/step_4_train_test_split_data'
+file_name_out = 'train_test_split_data'
+
+# Input paths
+dir_path_in = 'data_output/step_3_rate_data'
+file_name_in = 'rated_data'
 
 
 SUBSTRATE_TYPES = ['ag_bg']
@@ -48,10 +52,10 @@
 
 def splitting_data(rated_spectra,read_from_file=True):
     if read_from_file:
-        if not os.path.isfile(dir_path + '//' + file_name + '.joblib'):
+        if not os.path.isfile(dir_path_in + '//' + file_name_in + '.joblib'):
             return main(rated_spectra)
         else:
-            return utils.read_joblib(file_name, dir_path)
+            return utils.read_joblib(file_name_in, dir_path_in)
     
     else:
         return main(rated_spectra)
Index: best_0.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/best_0.txt b/best_0.txt
new file mode 100644
--- /dev/null	(revision 2c817eaa060816cb1081c1eeebf9c62b0143c0ed)
+++ b/best_0.txt	(revision 2c817eaa060816cb1081c1eeebf9c62b0143c0ed)
@@ -0,0 +1,90 @@
+2021.09.23 4
+2021.11.22 d3
+2021.10.07 b11
+2021.09.23 25
+2021.09.23 2
+2021.10.07 c10
+2021.10.07 b12
+2021.11.22 a6
+2021.09.23 1
+2021.10.07 d7
+2021.10.13 d5
+2021.11.22 a2
+2021.10.07 b10
+2021.10.07 d8
+2021.09.23 12
+2021.10.13 b7
+2021.10.13 d4
+2021.10.07 a8
+2021.10.13 d3
+2021.10.13 b8
+2021.11.22 d1
+2021.10.13 c3
+2021.10.13 d2
+2021.10.13 d6
+2021.10.12 e6
+2021.10.07 b7
+2021.11.22 c3
+2021.10.07 b9
+2021.10.07 c8
+2021.09.23 17
+2021.10.07 d11
+2021.11.22 b1
+2021.10.07 f12
+2021.10.07 d12
+2021.09.23 22
+2021.10.13 b2
+2021.10.07 f10
+2021.11.22 b5
+2021.09.23 19
+2021.09.23 10
+2021.11.22 c1
+2021.11.22 a1
+2021.09.23 5
+2021.09.23 23
+2021.10.07 c7
+2021.10.07 f9
+2021.10.13 a3
+2021.10.07 d10
+2021.10.07 a11
+2021.10.13 a6
+2021.09.23 14
+2021.10.07 h11
+2021.09.23 15
+2021.11.22 d2
+2021.11.22 b2
+2021.09.23 21
+2021.10.13 b6
+2021.10.07 f7
+2021.11.22 a3
+2021.11.22 b7
+2021.10.07 c11
+2021.10.13 d8
+2021.10.13 d7
+2021.11.22 a4
+2021.09.23 9
+2021.11.22 a5
+2021.11.22 a8
+2021.11.22 b6
+2021.10.13 b5
+2021.11.22 a7
+2021.10.13 d1
+2021.09.23 24
+2021.09.23 16
+2021.09.23 6
+2021.11.22 b8
+2021.10.07 a10
+2021.09.23 18
+2021.10.12 e7
+2021.10.13 b1
+2021.10.13 b4
+2021.11.22 b4
+2021.10.13 c8
+2021.10.13 b3
+2021.10.07 b8
+2021.10.13 a8
+2021.10.07 c9
+2021.10.07 c12
+2021.09.23 20
+2021.10.07 h8
+2021.11.22 c2
Index: best_1.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/best_1.txt b/best_1.txt
new file mode 100644
--- /dev/null	(revision 2c817eaa060816cb1081c1eeebf9c62b0143c0ed)
+++ b/best_1.txt	(revision 2c817eaa060816cb1081c1eeebf9c62b0143c0ed)
@@ -0,0 +1,110 @@
+2021.11.22 d4
+2021.10.07 e8
+2021.10.07 e3
+2021.12.10 b2
+2021.10.07 g5
+2021.10.07 b4
+2021.12.10 a8
+2021.10.12 e4
+2021.10.07 a1
+2021.12.10 a3
+2021.10.07 e4
+2021.10.07 f3
+2021.11.22 e6
+2021.11.22 c4
+2021.10.12 g8
+2021.10.12 g2
+2021.12.10 b7
+2021.10.12 f7
+2021.12.10 a2
+2021.10.07 b6
+2021.10.12 g7
+2021.11.22 e4
+2021.10.07 f6
+2021.10.07 d5
+2021.10.07 a4
+2021.10.07 f4
+2021.10.12 f4
+2021.10.12 g4
+2021.10.12 g6
+2021.10.12 g5
+2021.10.07 e2
+2021.10.07 f1
+2021.12.10 a7
+2021.10.12 d6
+2021.10.07 f5
+2021.10.07 g2
+2021.10.12 e2
+2021.10.07 a9
+2021.10.07 g1
+2021.12.10 a5
+2021.10.12 g1
+2021.10.13 a2
+2021.10.12 e9
+2021.12.10 b6
+2021.10.07 e11
+2021.10.07 a3
+2021.11.22 e2
+2021.10.07 b2
+2021.10.13 a7
+2021.10.07 e7
+2021.10.07 h4
+2021.10.12 e1
+2021.10.07 d1
+2021.12.10 b3
+2021.11.22 c8
+2021.10.07 c6
+2021.10.07 g6
+2021.11.22 d8
+2021.11.22 e5
+2021.12.10 a6
+2021.10.07 d3
+2021.10.07 h2
+2021.10.07 g9
+2021.10.07 e12
+2021.10.12 f2
+2021.10.12 d2
+2021.10.12 f8
+2021.12.10 a4
+2021.10.12 f6
+2021.10.12 f3
+2021.10.12 d5
+2021.10.07 c2
+2021.11.22 d6
+2021.10.13 c2
+2021.10.07 b3
+2021.10.13 c1
+2021.10.07 h3
+2021.12.10 b1
+2021.10.07 c1
+2021.10.07 h1
+2021.10.07 g3
+2021.11.22 c5
+2021.10.12 e5
+2021.10.12 e3
+2021.09.23 7
+2021.10.12 f5
+2021.12.10 b4
+2021.11.22 d5
+2021.10.12 g3
+2021.10.07 a12
+2021.11.22 c6
+2021.10.07 a2
+2021.10.07 b5
+2021.10.07 d6
+2021.10.07 g12
+2021.10.07 g11
+2021.11.22 e3
+2021.11.22 e1
+2021.11.22 d7
+2021.12.10 a1
+2021.11.22 c7
+2021.10.12 f1
+2021.10.07 h6
+2021.10.07 f2
+2021.10.07 d4
+2021.11.22 e8
+2021.10.07 a5
+2021.10.07 d2
+2021.10.07 c5
+2021.12.10 b5
Index: files_preparation/data_analysis.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/files_preparation/data_analysis.py b/files_preparation/data_analysis.py
--- a/files_preparation/data_analysis.py	(revision fe1a0fb87835e3c12a5b37688985e8b85c357792)
+++ b/files_preparation/data_analysis.py	(revision 2c817eaa060816cb1081c1eeebf9c62b0143c0ed)
@@ -29,9 +29,10 @@
 
     # line plots
     # best_line = px.line(best)
-    ratio_above_median = plot_ratio_above_median(ratio_df, rated_spectra)
+    # ratio_above_median = plot_ratio_above_median(ratio_df, rated_spectra)
 
-    return ratio_df, abs_df, best, worst, ratio_above_median
+    # return ratio_df, abs_df, best, worst, ratio_above_median
+    return ratio_df, abs_df, best, worst  # , ratio_above_median
 
 def plot_ratio(new_spectra_df):
     """
@@ -44,8 +45,8 @@
         ratio_df.loc[:, name] = new_spectra_df.loc[:, values[0]:values[1]].max(axis=1) \
                                 / new_spectra_df.loc[:, values[0]:values[1]].min(axis=1)
     
-    # fig = px.violin(ratio_df, y=peaks, title='Ratio')
-    # fig.show('browser')
+    fig = px.violin(ratio_df, y=peaks, title='Ratio')
+    fig.show('browser')
     
     return ratio_df
 
@@ -62,8 +63,8 @@
                                 - new_spectra_df.loc[:, values[0]:values[1]].min(axis=1)
 
 
-    # fig = px.violin(abs_df, y=peaks, title='Absolut Values')
-    # fig.show('browser')
+    fig = px.violin(abs_df, y=peaks, title='Absolut Values')
+    fig.show('browser')
     
     return abs_df
 
@@ -86,11 +87,11 @@
     # Getting worst ratio for each peak for each substrate
     worst = ratio_df.groupby('id').min()
     
-    # fig = px.violin(best, y=peaks, title="Best ratio")
-    # fig.show('browser')
-    #
-    # fig2 = px.violin(worst, y=peaks, title="Worst ratio")
-    # fig2.show('browser')
+    fig = px.violin(best, y=peaks, title="Best ratio")
+    fig.show('browser')
+
+    fig2 = px.violin(worst, y=peaks, title="Worst ratio")
+    fig2.show('browser')
     
     return best, worst
 
@@ -122,5 +123,5 @@
     dir_path = 'data_output/step_3_rate_data'
     file_name = 'rated_data'
     rated_spectra = utils.read_joblib(file_name, '../' + dir_path)
-    ratio_df, abs_df, best, worst, ratio_above_median = run(rated_spectra)
-    
\ No newline at end of file
+    # ratio_df, abs_df, best, worst, ratio_above_median = run(rated_spectra)
+    ratio_df, abs_df, best, worst = run(rated_spectra)
Index: files_preparation/reading_data.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/files_preparation/reading_data.py b/files_preparation/reading_data.py
--- a/files_preparation/reading_data.py	(revision fe1a0fb87835e3c12a5b37688985e8b85c357792)
+++ b/files_preparation/reading_data.py	(revision 2c817eaa060816cb1081c1eeebf9c62b0143c0ed)
@@ -1,7 +1,8 @@
 import os
 import re
+
 import pandas as pd
-import numpy as np
+
 import utils
 
 # Output paths
@@ -22,56 +23,54 @@
     files = {}
     for file_names_types in file_names:
         data = []
-        
+
         for name in file_names[file_names_types]:
             # Splits path name into two elements in a tuple. One is path and the second is name of a file
-            
+
             if isinstance(name, str):
                 path_split = os.path.split(name)
-                
-                #TODO koniecznie poprawić tutaj ten regex, jak nie tu, to przy przypisywaniu "id"
-                prefix = re.search(r'20.{8}',path_split[0]).group(0)
-                main_name = re.search(r'.*',path_split[1]).group(0)[:-4] # getting filenames and deleting '.txt'
+
+                # TODO koniecznie poprawić tutaj ten regex, jak nie tu, to przy przypisywaniu "id"
+                prefix = re.search(r'20.{8}', path_split[0]).group(0)
+                main_name = re.search(r'.*', path_split[1]).group(0)[:-4]  # getting filenames and deleting '.txt'
                 # Getting rid of automatically saved spectra of the background
                 if 'sp_0' in main_name:
                     continue
-                
+
                 tmp_file_name = prefix + ' ' + main_name
             else:
                 continue
-            
+
             # adding name of file into metadata DataFrame
             meta_df = read_metadata(name)
             meta_df.loc['file_name'] = name
-            
+
             data_df = read_spectrum(name)
-            
+
             # Solution for files in which there were no values in th ecolumn "Raman Shift"
             if data_df is None:
                 continue
-            
+
             # Distinguish between two types of spectra names
             if len(main_name) > 10:
                 id_name = main_name.split('_')
                 id_name[1].lstrip('0')
-    
+
                 id_name = '_'.join(id_name[0:2])
                 data_df.loc['id'] = id_name
-    
+
                 data_df.rename(columns={dark: main_name}, inplace=True)
             else:
                 data_df.loc['id'] = tmp_file_name
                 data_df.rename(columns={dark: tmp_file_name}, inplace=True)
-    
-    
+
             # data_df.rename(columns={'Dark Subtracted #1': main_name}, inplace=True)
 
-            
             # creates list of tuples containing 2 elements metadata and data
             data.append((meta_df, data_df))
-        
+
         files[file_names_types] = data
-    
+
     utils.save_as_joblib(files, file_name, dir_path)
     return files
 
@@ -85,20 +84,20 @@
     read_params = {'sep': ';', 'skiprows': lambda x: x < 79 or x > 1500, 'decimal': ',',
                    'usecols': ['Raman Shift', dark],
                    'skipinitialspace': True, 'encoding': "utf-8", 'na_filter': True}
-    
+
     data_df = pd.read_csv(filepath, **read_params)
-    
+
     data_df.dropna(axis=0, how="any")
-    
+
     data_df = data_df[data_df.iloc[:, 0] > 253]
-    
+
     # TODO sprawdzić, czy to ma wpływ na wyniki
     data_df = data_df.astype({'Raman Shift': 'int'})
-    
+
     # Solution for files in which there were no values in th ecolumn "Raman Shift"
     if data_df.empty:
         return None
-    
+
     data_df.set_index('Raman Shift', inplace=True)
     return data_df
 
@@ -109,11 +108,11 @@
     :param filepath: String
     :return: data frame
     """
-    
+
     read_params = {'sep': ';', 'skiprows': lambda x: x > 78, 'decimal': ',', 'index_col': 0,
                    'skipinitialspace': True, 'encoding': "utf-8", 'header': None}
     meta_df = pd.read_csv(filepath, **read_params)
-    
+
     return meta_df
 
 
@@ -125,4 +124,4 @@
             read_files = utils.read_joblib(file_name, dir_path)
         return read_files
     else:
-        return main(file_names)
\ No newline at end of file
+        return main(file_names)
Index: get_model.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/get_model.py b/get_model.py
--- a/get_model.py	(revision fe1a0fb87835e3c12a5b37688985e8b85c357792)
+++ b/get_model.py	(revision 2c817eaa060816cb1081c1eeebf9c62b0143c0ed)
@@ -3,6 +3,9 @@
 """
 import time
 from datetime import datetime
+
+import pandas as pd
+
 from files_preparation import getting_names, reading_data, grouping_data, rating_spectra, data_analysis
 from ML import train_test_split, estimators
 
@@ -24,7 +27,7 @@
 
 print('Getting filenames...')
 
-file_names = getting_names.get_names(read_from_file=False)
+file_names = getting_names.get_names(read_from_file=True)
 
 print(f'Data loaded in {round(time.time() - start_time, 2)} seconds')
 print()
@@ -82,7 +85,7 @@
 start_time = time.time()
 print('Rating spectra...')
 rated_spectra = rating_spectra.rate_spectra(grouped_files, read_from_file=True, baseline_corr=False)
-data_analysis.run(rated_spectra)
+# data_analysis.run(rated_spectra)
 
 print(f'Data loaded in {round(time.time() - start_time, 2)} seconds')
 print()
@@ -114,21 +117,33 @@
 start_time = time.time()
 print('Looking for best estimator... be patient...')
 
-for key in train_test_data.keys():
-    print(f'Getting best model for {key}')
-    X_train, X_test, y_train, y_test, X_val, y_val = train_test_data[key]
+# for key in train_test_data.keys():
+#     print(f'Getting best model for {key}')
+X = train_test_data.iloc[:, :-5]
+y = train_test_data.iloc[:, -2]
 
+from sklearn.model_selection import train_test_split
+X_train, X_test, y_train, y_test = train_test_split(X, y,
+                                                    test_size=0.1,
+                                                    random_state=42,
+                                                    stratify=y)
+
+X_train, X_val, y_train, y_val = train_test_split(X_train, y_train,
+                                                  test_size=0.1111,
+                                                  random_state=42,
+                                                  stratify=y_train)
 
-    ml_variables = {
-        'X_train': X_train,
-        'X_val': X_val,
-        'X_test': X_test,
-        'y_train': y_train,
-        'y_val': y_val,
-        'y_test': y_test,
-    }
+ml_variables = {
+    'X_train': X_train,
+    'X_val': X_val,
+    'X_test': X_test,
+    'y_train': y_train,
+    'y_val': y_val,
+    'y_test': y_test,
+}
 
-    scores, models = estimators.get_best_classsifier(**ml_variables)
+
+scores, models = estimators.get_best_classsifier(**ml_variables)
 
 print(f'Data loaded in {round(time.time() - start_time, 2)} seconds')
 print()
\ No newline at end of file
